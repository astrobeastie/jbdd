group 'de.tum.in'
version '0.1.0'

apply plugin: 'java'

apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

def defaultEncoding = 'UTF-8'
tasks.withType(JavaCompile) { options.encoding = defaultEncoding }
tasks.withType(Javadoc) { options.encoding = defaultEncoding }

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:annotations:3.0.1'
    compileOnly 'org.immutables:value:2.5.3'

    compile 'com.google.guava:guava:22.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

// Findbugs
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html
findbugs {
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("$project.projectDir/config/findbugs-exclude.xml")
    ignoreFailures = false
}
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// PMD
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html
pmd {
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("$project.rootDir/config/pmd-rules.xml")
    ruleSets = [] // We specify all rules in rules.xml
    consoleOutput = false
    ignoreFailures = false
}
tasks.withType(Pmd) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Checkstyle
// https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
checkstyle {
    toolVersion = "7.8.1"
    configFile = file("$project.rootDir/config/checkstyle.xml")
    ignoreFailures = false
    showViolations = false // Don't litter console
    checkstyleMain {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-main-suppression.xml"]
    }
    checkstyleTest {
        configProperties = ['suppression-file':
                                    "$project.rootDir/config/checkstyle-test-suppression.xml"]
    }
}
// See https://github.com/gradle/gradle/issues/881
tasks.withType(Checkstyle).each { checkstyleTask ->
    checkstyleTask.doLast {
        reports.all { report ->
            def outputFile = report.destination
            if (outputFile.exists() && outputFile.text.contains("<error ")) {
                throw new GradleException("There were checkstyle warnings! See $outputFile")
            }
        }
    }
}
